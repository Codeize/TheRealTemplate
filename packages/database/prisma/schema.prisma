generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
  previewFeatures = ["metrics"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String             @id
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  premium           Boolean            @default(false)
  premiumPurchased  DateTime?
  guildData         UserGuildData[]
  premiumGuildSlots PremiumGuildSlot[]
}

model Guild {
  id                String             @id
  name              String             @default("New Guild")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userData          UserGuildData[]
  premiumGuildSlots PremiumGuildSlot[]
  factoryResets     FactoryReset[]
}

model FactoryReset {
  id         String   @id @default(cuid())
  guildId    String
  executorId String
  resetAt    DateTime
  guild      Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
}

model UserGuildData {
  userId    String
  guildId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId])
  @@index([guildId])
}

model PremiumGuildSlot {
  id        String   @id @default(cuid())
  userId    String
  guildId   String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild     Guild?   @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([userId])
}

model WebAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              WebUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model WebSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         WebUser  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WebUser {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      WebAccount[]
  sessions      WebSession[]
}

model WebVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
